-- Consolidated database schema for public schema only
-- Generated by consolidation of db/*/schema.sql

-- Ensure UUID generator is available (projects using uuid_generate_v4)
create extension if not exists "uuid-ossp";
-- Trigram index support for ILIKE fuzzy search
create extension if not exists pg_trgm;
-- Cryptographic functions including gen_random_uuid()
create extension if not exists pgcrypto;

-- Keep everything in public
set search_path = public;

-- =========================
-- Core/public (from db/public/schema.sql)
-- =========================
create table if not exists profiles (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id uuid not null unique references auth.users(id) on delete cascade,
  display_name text,
  role text not null check (role in ('admin','student','tutor')),
  avatar_url text,
  bio text,
  timezone text default 'Asia/Kuala_Lumpur',
  status text not null check (status in ('active','banned')) default 'active',
  banned_reason text null,
  banned_at timestamptz,
  points int not null default 0,
  onboarded boolean not null default false,
  onboarded_step int default 0 check (onboarded_step >= 0 and onboarded_step <= 3),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  last_login timestamptz,
  deleted_at timestamptz
);

create table if not exists notifications (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  kind text not null,
  payload jsonb not null default '{}',
  is_read boolean not null default false,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists audit_log (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  actor_id bigint references profiles(id),
  action text not null,
  subject_type text,
  subject_id text,
  meta jsonb not null default '{}',
  created_at timestamptz not null default now()
);

create table if not exists checkins (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  checkin_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists report (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  reporter_id bigint references profiles(id),
  subject_type text not null,
  subject_id text not null,
  reason text,
  status text not null check (status in ('open','reviewing','resolved','rejected')) default 'open',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists action (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  report_id bigint references report(id) on delete set null,
  actor_id bigint references profiles(id),
  action text not null, -- hide, delete, warn, ban
  notes text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists ban (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint references profiles(id) on delete cascade,
  reason text,
  expires_at timestamptz,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- =========================
-- AI (from db/ai/schema.sql)
-- =========================
create table if not exists ai_agent (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  name text not null,
  owner_id bigint references profiles(id),
  purpose text,
  config jsonb not null default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists ai_run (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  agent_id bigint not null references ai_agent(id) on delete cascade,
  requester_id bigint references profiles(id),
  input jsonb not null,
  output jsonb,
  status text not null check (status in ('queued','running','succeeded','failed','needs_review')) default 'queued',
  reviewed_by bigint references profiles(id),
  reviewed_at timestamptz,
  review_note text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);
-- =========================
-- Courses (from db/courses/schema.sql)
-- Note: renamed some tables to avoid reserved identifiers when moved to public
-- =========================
create table if not exists course (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete restrict,
  title text not null,
  description text,
  visibility text not null check (visibility in ('public','private','unlisted')) default 'private',
  price_cents int default 0,
  currency text default 'MYR',
  tags text[] default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_live_session (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint references course(id) on delete set null,
  title text,
  host_id bigint not null references profiles(id) on delete restrict,
  starts_at timestamptz not null,
  ends_at timestamptz,
  status text not null check (status in ('scheduled','live','ended','cancelled')) default 'scheduled',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_module (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  title text not null,
  position int not null default 1,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_lesson (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  module_id bigint references course_module(id) on delete set null,
  title text not null,
  kind text not null check (kind in ('video','live','document','quiz','assignment','whiteboard')),
  content_url text,
  duration_sec int,
  live_session_id bigint null references classroom_live_session(id) on delete set null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_enrollment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  role text not null check (role in ('student','tutor','owner','assistant')) default 'student',
  status text not null check (status in ('active','completed','dropped','locked')) default 'active',
  started_at timestamptz not null default now(),
  completed_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (course_id, user_id)
);

create table if not exists course_progress (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  state text not null check (state in ('not_started','in_progress','completed')) default 'not_started',
  progress_pct numeric(5,2) not null default 0,
  last_seen_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (user_id, lesson_id)
);

create table if not exists course_reviews (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  rating int not null check (rating between 1 and 5),
  comment text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (course_id, user_id)
);

create table if not exists course_product (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  kind text not null check (kind in ('course','plugin','resource')),
  ref_id bigint,
  title text not null,
  price_cents int not null,
  currency text not null default 'MYR',
  is_active boolean not null default true,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_order (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  buyer_id bigint not null references profiles(id) on delete restrict,
  status text not null check (status in ('pending','paid','failed','refunded')) default 'pending',
  total_cents int not null default 0,
  currency text not null default 'MYR',
  meta jsonb not null default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_order_item (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  order_id bigint not null references course_order(id) on delete cascade,
  product_id bigint not null references course_product(id) on delete restrict,
  quantity int not null default 1,
  unit_price_cents int not null,
  subtotal_cents int not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_payment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  order_id bigint not null references course_order(id) on delete cascade,
  provider text not null,
  provider_ref text,
  amount_cents int not null,
  status text not null check (status in ('pending','succeeded','failed','refunded')),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- Marketplace enrichments (from db/courses/migrations/20250830_add_marketplace_fields.sql)
alter table if exists course
  add column if not exists thumbnail_url text,
  add column if not exists level text check (level in ('beginner','intermediate','advanced')) default 'beginner',
  add column if not exists total_lessons int default 0,
  add column if not exists total_duration_minutes int default 0,
  add column if not exists average_rating numeric(3,2) default 0,
  add column if not exists total_students int default 0,
  add column if not exists is_free boolean not null default false;

alter table if exists course_product
  add column if not exists metadata jsonb default '{}'::jsonb;

create index if not exists idx_course_visibility_not_deleted on course (visibility) where is_deleted = false;
create index if not exists idx_course_public_id on course (public_id);
-- =========================
-- Classroom (from db/classroom/schema.sql)
-- =========================


create table if not exists classroom_attendance (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  join_at timestamptz,
  leave_at timestamptz,
  attention_score numeric(5,2),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (session_id, user_id)
);

create table if not exists classroom_chat_message (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  sender_id bigint not null references profiles(id) on delete cascade,
  message text not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_whiteboard_session (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint references classroom_live_session(id) on delete cascade,
  title text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_whiteboard_event (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  wb_id bigint not null references classroom_whiteboard_session(id) on delete cascade,
  actor_id bigint references profiles(id),
  kind text not null,
  payload jsonb not null,
  created_at timestamptz not null default now()
);

create table if not exists classroom_recording (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  url text not null,
  duration_sec int,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_question_bank (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete cascade,
  title text not null,
  topic_tags text[] default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_question (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  bank_id bigint references classroom_question_bank(id) on delete cascade,
  stem text not null,
  kind text not null check (kind in ('mcq','true_false','short','essay','code')),
  choices jsonb,
  answer jsonb,
  difficulty int check (difficulty between 1 and 5),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_quiz (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint references course(id) on delete set null,
  title text not null,
  settings jsonb not null default '{"shuffle":true,"time_limit":null}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_quiz_question (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  quiz_id bigint not null references classroom_quiz(id) on delete cascade,
  question_id bigint not null references classroom_question(id) on delete restrict,
  points numeric(6,2) not null default 1,
  position int not null default 1,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (quiz_id, question_id)
);

create table if not exists classroom_attempt (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  quiz_id bigint not null references classroom_quiz(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  started_at timestamptz not null default now(),
  submitted_at timestamptz,
  score numeric(8,2) not null default 0,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_answer (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  attempt_id bigint not null references classroom_attempt(id) on delete cascade,
  question_id bigint not null references classroom_question(id) on delete cascade,
  response jsonb,
  is_correct boolean,
  points_awarded numeric(6,2) not null default 0,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (attempt_id, question_id)
);

create table if not exists classroom_assignment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  title text not null,
  description text,
  due_at timestamptz,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_submission (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  assignment_id bigint not null references classroom_assignment(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  content_url text,
  text_content text,
  plagiarism_score numeric(5,2),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_grade (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  assignment_id bigint not null references classroom_assignment(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  grader_id bigint references profiles(id),
  score numeric(8,2) not null,
  feedback text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (assignment_id, user_id)
);

-- =========================
-- Community (from db/community/schema.sql)
-- =========================
create table if not exists community_group (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  name text not null,
  description text,
  visibility text check (visibility in ('public','private')) default 'public',
  owner_id bigint not null references profiles(id) on delete cascade,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_group_member (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  group_id bigint not null references community_group(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  role text check (role in ('owner','admin','member')) default 'member',
  joined_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (group_id, user_id)
);

create table if not exists community_post (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  group_id bigint references community_group(id) on delete set null,
  author_id bigint not null references profiles(id) on delete cascade,
  title text,
  body text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_comment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  post_id bigint not null references community_post(id) on delete cascade,
  author_id bigint not null references profiles(id) on delete cascade,
  body text not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_reaction (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  post_id bigint not null references community_post(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  emoji text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (post_id, user_id, emoji)
);

create table if not exists community_points_ledger (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  points int not null,
  reason text,
  ref jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_achievement (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  code text unique not null,
  name text not null,
  description text,
  rule jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_user_achievement (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  achievement_id bigint not null references community_achievement(id) on delete cascade,
  unlocked_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_challenges (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  title text not null,
  description text,
  max_score int not null,
  passing_score int not null,
  metadata jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_challenge_results (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  challenge_id bigint not null references community_challenges(id) on delete cascade,
  score int not null,
  max_score int not null,
  passed boolean not null,
  attempted_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique(user_id, challenge_id)
);

-- =========================
-- Tutoring (from db/tutoring/schema.sql)
-- =========================
create table if not exists tutoring_tutors (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  headline text,
  subjects text[] not null default '{}',
  hourly_rate numeric(10,2),
  qualifications text,
  rating_avg numeric(3,2) default 0,
  rating_count int default 0,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_students (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  school text,
  grade text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_availability (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  tutor_id bigint not null references tutoring_tutors(id) on delete cascade,
  start_at timestamptz not null,
  end_at timestamptz not null,
  rrule text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_appointments (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  tutor_id bigint not null references tutoring_tutors(id) on delete restrict,
  student_id bigint not null references tutoring_students(id) on delete restrict,
  scheduled_at timestamptz not null,
  duration_min int not null check (duration_min > 0),
  status text not null check (status in ('requested','confirmed','completed','cancelled')) default 'requested',
  notes text,
  created_by bigint references profiles(id),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_file (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete cascade,
  path text not null,
  mime_type text,
  size_bytes bigint,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_note (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete cascade,
  title text,
  body text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_share (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  resource_kind text not null check (resource_kind in ('file','note')),
  resource_id bigint not null,
  shared_with bigint references profiles(id),
  access text not null check (access in ('view','edit','comment')),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);