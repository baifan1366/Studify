-- Consolidated database schema for public schema only
-- Generated by consolidation of db/*/schema.sql

-- Ensure UUID generator is available (projects using uuid_generate_v4)
create extension if not exists "uuid-ossp";
-- Trigram index support for ILIKE fuzzy search
create extension if not exists pg_trgm;
-- Cryptographic functions including gen_random_uuid()
create extension if not exists pgcrypto;

-- Keep everything in public
set search_path = public;

-- =========================
-- Core/public (from db/public/schema.sql)
-- =========================
create table if not exists profiles (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id uuid not null unique references auth.users(id) on delete cascade,
  display_name text,
  full_name text,
  email text,
  role text not null check (role in ('admin','student','tutor')),
  avatar_url text,
  bio text,
  timezone text default 'Asia/Kuala_Lumpur',
  status text not null check (status in ('active','banned')) default 'active',
  banned_reason text null,
  banned_at timestamptz,
  points int not null default 0,
  onboarded boolean not null default false,
  onboarded_step int default 0 check (onboarded_step >= 0 and onboarded_step <= 3),
  is_deleted boolean not null default false,
  -- Enhanced profile fields for settings functionality
  preferences jsonb default '{}',
  theme text default 'system' check (theme in ('light', 'dark', 'system')),
  language text default 'en',
  notification_settings jsonb default '{
    "email_notifications": true,
    "push_notifications": true,
    "course_updates": true,
    "community_updates": false,
    "marketing_emails": false
  }',
  privacy_settings jsonb default '{
    "profile_visibility": "public",
    "show_email": false,
    "show_progress": true,
    "data_collection": true
  }',
  two_factor_enabled boolean default false,
  email_verified boolean default false,
  profile_completion int default 0 check (profile_completion >= 0 and profile_completion <= 100),
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  last_login timestamptz,
  deleted_at timestamptz
);

create table if not exists notifications (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  kind text not null,
  payload jsonb not null default '{}',
  is_read boolean not null default false,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists audit_log (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  actor_id bigint references profiles(id),
  action text not null,
  subject_type text,
  subject_id text,
  meta jsonb not null default '{}',
  created_at timestamptz not null default now()
);

create table if not exists checkins (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  checkin_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists report (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  reporter_id bigint references profiles(id),
  subject_type text not null,
  subject_id text not null,
  reason text,
  status text not null check (status in ('open','reviewing','resolved','rejected')) default 'open',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists action (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  report_id bigint references report(id) on delete set null,
  actor_id bigint references profiles(id),
  action text not null, -- hide, delete, warn, ban
  notes text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists ban (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint references profiles(id) on delete cascade,
  reason text,
  expires_at timestamptz,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- =========================
-- AI (from db/ai/schema.sql)
-- =========================
create table if not exists ai_agent (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  name text not null,
  owner_id bigint references profiles(id),
  purpose text,
  config jsonb not null default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists ai_run (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  agent_id bigint not null references ai_agent(id) on delete cascade,
  requester_id bigint references profiles(id),
  input jsonb not null,
  output jsonb,
  status text not null check (status in ('queued','running','succeeded','failed','needs_review')) default 'queued',
  reviewed_by bigint references profiles(id),
  reviewed_at timestamptz,
  review_note text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);
-- =========================
-- Courses (from db/courses/schema.sql)
-- Note: renamed some tables to avoid reserved identifiers when moved to public
-- =========================
create table if not exists course (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete restrict,
  title text not null,
  description text,
  slug text unique,
  video_intro_url text,
  requirements text[],
  learning_objectives text[],
  category text,
  language text default 'en',
  certificate_template text,
  auto_create_classroom boolean default true,
  auto_create_community boolean default true,
  visibility text not null check (visibility in ('public','private','unlisted')) default 'private',
  price_cents int default 0,
  currency text default 'MYR',
  tags text[] default '{}',
  thumbnail_url text,
  level text check (level in ('beginner','intermediate','advanced')) default 'beginner',
  total_lessons int default 0,
  total_duration_minutes int default 0,
  average_rating numeric(3,2) default 0,
  total_students int default 0,
  is_free boolean not null default false,
  status text check(status in ('active', 'pending', 'inactive')) default 'inactive',
  community_group_public_id UUID references community_group(public_id) on delete set null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_module (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  title text not null,
  position int not null default 1,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_lesson (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  module_id bigint references course_module(id) on delete set null,
  title text not null,
  slug text,
  position int default 1,
  description text,
  is_preview boolean default false,
  transcript text,
  attachments jsonb default '[]'::jsonb,
  kind text not null check (kind in ('video','live','document','quiz','assignment','whiteboard')),
  content_url text,
  duration_sec int,
  live_session_id bigint null references classroom_live_session(id) on delete set null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_attachments (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete restrict,
  title text not null,
  url text,
  type text DEFAULT 'other',
  cloudinary_hls_url text,
  cloudinary_mp3 text,
  cloudinary_processed_at timestamptz,
  cloudinary_public_id text,
  size int,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_enrollment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  role text not null check (role in ('student','tutor','owner','assistant')) default 'student',
  status text not null check (status in ('active','completed','dropped','locked')) default 'active',
  started_at timestamptz not null default now(),
  completed_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (course_id, user_id)
);

create table if not exists course_progress (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  state text not null check (state in ('not_started','in_progress','completed')) default 'not_started',
  progress_pct numeric(5,2) not null default 0,
  ai_recommendation jsonb default '{}'::jsonb,
  time_spent_sec int default 0,
  completion_date timestamptz,
  last_seen_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (user_id, lesson_id)
);

create table if not exists course_chapter (
  id bigserial primary key,
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  title text not null,
  description text,
  start_time_sec int,
  end_time_sec int,
  order_index int not null default 1,
  is_deleted boolean not null default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  deleted_at timestamptz
);

create table if not exists course_reviews (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  rating int not null check (rating between 1 and 5),
  comment text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (course_id, user_id)
);

create table if not exists course_product (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  kind text not null check (kind in ('course','plugin','resource')),
  ref_id bigint,
  title text not null,
  price_cents int not null,
  currency text not null default 'MYR',
  metadata jsonb default '{}'::jsonb,
  is_active boolean not null default true,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_order (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  buyer_id bigint not null references profiles(id) on delete restrict,
  status text not null check (status in ('pending','paid','failed','refunded')) default 'pending',
  total_cents int not null default 0,
  currency text not null default 'MYR',
  meta jsonb not null default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_order_item (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  order_id bigint not null references course_order(id) on delete cascade,
  product_id bigint not null references course_product(id) on delete restrict,
  quantity int not null default 1,
  unit_price_cents int not null,
  subtotal_cents int not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists course_payment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  order_id bigint not null references course_order(id) on delete cascade,
  provider text not null,
  provider_ref text,
  amount_cents int not null,
  status text not null check (status in ('pending','succeeded','failed','refunded')),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);


-- Course Notes (enhanced from existing)
create table if not exists course_notes (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  timestamp_sec int, -- 视频内时间点
  content text not null,
  ai_summary text, -- AI生成的总结
  tags text[] default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- Course Quiz Questions (enhanced)
create table if not exists course_quiz_question (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  question_text text not null,
  question_type text not null check (question_type in ('multiple_choice', 'true_false', 'short_answer', 'essay', 'fill_blank')),
  options jsonb, -- For multiple choice: ["Option A", "Option B", "Option C", "Option D"]
  correct_answer jsonb not null, -- For multiple choice: "A", for true/false: true/false, for text: "correct answer"
  explanation text,
  points int default 1,
  difficulty int check (difficulty between 1 and 5) default 1,
  position int default 1,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- Course Quiz Submissions (enhanced)
create table if not exists course_quiz_submission (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  question_id bigint not null references course_quiz_question(id) on delete cascade,
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  user_answer jsonb not null,
  is_correct boolean not null,
  points_earned int default 0,
  time_taken_sec int,
  attempt_number int default 1,
  submitted_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique(user_id, question_id, attempt_number)
);

-- Course Concepts for Knowledge Graph
CREATE EXTENSION IF NOT EXISTS pg_vector;
create table if not exists course_concept (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  name text not null,
  description text,
  embedding vector(384), -- For AI similarity search
  difficulty_level int check (difficulty_level between 1 and 5) default 1,
  estimated_time_minutes int default 30,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- Course Concept Links for Knowledge Graph
create table if not exists course_concept_link (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  source_concept_id bigint not null references course_concept(id) on delete cascade,
  target_concept_id bigint not null references course_concept(id) on delete cascade,
  relation_type text not null check (relation_type in ('prerequisite', 'related', 'example_of', 'part_of', 'leads_to')),
  strength numeric(3,2) default 1.0 check (strength between 0 and 1), -- Relationship strength
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique(source_concept_id, target_concept_id, relation_type)
);

-- Course Concept to Lesson Mapping
create table if not exists course_concept_lesson (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  concept_id bigint not null references course_concept(id) on delete cascade,
  lesson_id bigint not null references course_lesson(id) on delete cascade,
  relevance_score numeric(3,2) default 1.0 check (relevance_score between 0 and 1),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique(concept_id, lesson_id)
);

-- Course Certificates
create table if not exists course_certificate (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  course_id bigint not null references course(id) on delete cascade,
  certificate_url text,
  completion_percentage numeric(5,2) not null,
  final_score numeric(5,2),
  issued_at timestamptz not null default now(),
  expires_at timestamptz,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique(user_id, course_id)
);

-- Course Learning Analytics
create table if not exists course_analytics (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  course_id bigint not null references course(id) on delete cascade,
  lesson_id bigint references course_lesson(id) on delete cascade,
  event_type text not null, -- 'lesson_start', 'lesson_complete', 'quiz_attempt', 'note_created', etc.
  event_data jsonb default '{}'::jsonb,
  session_id uuid,
  timestamp timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- Course Discussion Forums (separate from community groups)
create table if not exists course_discussion (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  course_id bigint not null references course(id) on delete cascade,
  lesson_id bigint references course_lesson(id) on delete set null,
  author_id bigint not null references profiles(id) on delete cascade,
  title text not null,
  content text not null,
  is_pinned boolean default false,
  is_resolved boolean default false,
  view_count int default 0,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- Course Discussion Replies
create table if not exists course_discussion_reply (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  discussion_id bigint not null references course_discussion(id) on delete cascade,
  author_id bigint not null references profiles(id) on delete cascade,
  parent_reply_id bigint references course_discussion_reply(id) on delete cascade,
  content text not null,
  is_solution boolean default false,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);
-- =========================
-- Classroom (from db/classroom/schema.sql)
-- =========================
create table if not exists classroom (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  slug text unique,
  name text not null,
  color text not null,
  description text,
  class_code text unique not null, -- 邀请码
  visibility text check (visibility in ('public','private')) default 'public',
  owner_id bigint not null references profiles(id) on delete cascade,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create table if not exists classroom_member (
  id bigserial primary key,
  classroom_id bigint not null references classroom(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  role text check (role in ('owner','tutor','student')) default 'student',
  permissions jsonb default '{}'::jsonb, -- 扩展权限，如 { "can_assign_asg": true }
  joined_at timestamptz not null default now(),
  unique (classroom_id, user_id)
);

create table if not exists classroom_live_session (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  classroom_id bigint not null references classroom(id) on delete cascade,
  title text,
  host_id bigint not null references profiles(id) on delete restrict,
  starts_at timestamptz not null,
  ends_at timestamptz,
  status text not null check (status in ('scheduled','live','ended','cancelled')) default 'scheduled',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_assignment (
  id bigserial primary key,
  classroom_id bigint not null references classroom(id) on delete cascade,
  author_id bigint not null references profiles(id) on delete cascade,
  title text not null,
  description text,
  due_date timestamptz,
  created_at timestamptz default now()
);

create table if not exists classroom_submission (
  id bigserial primary key,
  assignment_id bigint not null references classroom_assignment(id) on delete cascade,
  student_id bigint not null references profiles(id) on delete cascade,
  content text,
  submitted_at timestamptz default now(),
  grade numeric,
  feedback text,
  unique (assignment_id, student_id)
);

create table if not exists plagiarism_report (
  id bigserial primary key,
  submission_id bigint not null references classroom_submission(id) on delete cascade,
  similarity_score numeric, -- 0 ~ 100
  report jsonb, -- AI 返回的详细结果
  created_at timestamptz default now()
);

create table if not exists classroom_attendance (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  join_at timestamptz,
  leave_at timestamptz,
  status text check (status in ('present','late','absent')) default 'present',
  signed_at timestamptz, -- 主动签到时间
  attention_score numeric(5,2),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (session_id, user_id)
);

create table if not exists classroom_chat_message (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  sender_id bigint not null references profiles(id) on delete cascade,
  message text not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_whiteboard_session (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint references classroom_live_session(id) on delete cascade,
  title text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_whiteboard_event (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  wb_id bigint not null references classroom_whiteboard_session(id) on delete cascade,
  actor_id bigint references profiles(id),
  kind text not null,
  payload jsonb not null,
  created_at timestamptz not null default now()
);

create table if not exists classroom_recording (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  url text not null,
  duration_sec int,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_question_bank (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete cascade,
  title text not null,
  topic_tags text[] default '{}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_question (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  bank_id bigint references classroom_question_bank(id) on delete cascade,
  stem text not null,
  kind text not null check (kind in ('mcq','true_false','short','essay','code')),
  choices jsonb,
  answer jsonb,
  difficulty int check (difficulty between 1 and 5),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_quiz (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  classroom_id bigint not null references classroom(id) on delete cascade,
  title text not null,
  settings jsonb not null default '{"shuffle":true,"time_limit":null}',
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_quiz_question (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  quiz_id bigint not null references classroom_quiz(id) on delete cascade,
  question_id bigint not null references classroom_question(id) on delete restrict,
  points numeric(6,2) not null default 1,
  position int not null default 1,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (quiz_id, question_id)
);

create table if not exists classroom_attempt (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  quiz_id bigint not null references classroom_quiz(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  started_at timestamptz not null default now(),
  submitted_at timestamptz,
  score numeric(8,2) not null default 0,
  proctoring_data jsonb, -- 存人脸检测/屏幕活动/AI监控结果
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_answer (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  attempt_id bigint not null references classroom_attempt(id) on delete cascade,
  question_id bigint not null references classroom_question(id) on delete cascade,
  response jsonb,
  is_correct boolean,
  points_awarded numeric(6,2) not null default 0,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (attempt_id, question_id)
);

create table if not exists classroom_submission (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  assignment_id bigint not null references classroom_assignment(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  content_url text,
  text_content text,
  plagiarism_score numeric(5,2),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_grade (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  assignment_id bigint not null references classroom_assignment(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  grader_id bigint references profiles(id),
  score numeric(8,2) not null,
  feedback text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (assignment_id, user_id)
);

create table if not exists mistake_book (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  assignment_id bigint references classroom_assignment(id) on delete set null,
  submission_id bigint references classroom_submission(id) on delete set null,
  question_id bigint references classroom_question(id) on delete set null,
  course_question_id bigint references course_quiz_question(id) on delete set null,
  course_id bigint references course(id) on delete set null,
  lesson_id bigint references course_lesson(id) on delete set null,
  mistake_content text not null,
  analysis text,
  source_type text check (source_type in ('quiz','assignment','manual','course_quiz')) default 'manual',
  knowledge_points text[],
  recommended_exercises jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- 学习路径相关表结构
-- 学习路径表
create table if not exists learning_path (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  goal text not null,
  duration integer not null, -- 以天为单位
  progress numeric(5,2) default 0, -- 总体进度百分比
  is_active boolean not null default true,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- 学习路径里程碑表
create table if not exists milestone (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  path_id bigint not null references learning_path(id) on delete cascade,
  title text not null,
  description text,
  order_index integer not null, -- 里程碑顺序
  status text not null check (status in ('locked','in-progress','completed')) default 'locked',
  resource_type text, -- 资源类型：course, lesson, assignment, quiz, etc.
  resource_id bigint, -- 关联的资源ID
  prerequisites jsonb, -- 前置条件，如[{"milestone_id": "uuid", "required": true}]
  reward jsonb, -- 奖励信息，如{"badge_id": "uuid", "points": 100, "message": "恭喜解锁中级任务"}
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- 课堂帖子表
create table if not exists classroom_posts (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  session_id bigint not null references classroom_live_session(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  content text not null,
  attachments jsonb default '[]'::jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

-- 课堂帖子评论表
create table if not exists classroom_post_comments (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  post_id bigint not null references classroom_posts(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  content text not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists classroom_post_reactions (
  id bigserial primary key,
  post_id bigint not null references classroom_posts(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  reaction_type text not null, -- like, heart, etc
  created_at timestamptz default now(),
  unique (post_id, user_id, reaction_type)
);

create table if not exists classroom_engagement_report (
  id bigserial primary key,
  user_id bigint not null references profiles(id),
  course_id bigint not null references course(id),
  participation_score numeric(5,2), -- 综合分数
  report jsonb, -- 详细数据：出勤率/作业完成率/答题正确率等
  generated_at timestamptz default now()
);

-- =========================
-- Community (from db/community/schema.sql)
-- =========================
create table if not exists community_group (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4() unique,
  name text not null,
  description text,
  slug text unique not null,
  visibility text check (visibility in ('public','private')) default 'public',
  owner_id bigint not null references profiles(id) on delete cascade,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_group_member (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  group_id bigint not null references community_group(id) on delete cascade,
  user_id bigint not null references profiles(id) on delete cascade,
  role text check (role in ('owner','admin','member')) default 'member',
  joined_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  unique (group_id, user_id)
);

create table if not exists community_post (
  id bigserial primary key,
  public_id uuid unique not null default uuid_generate_v4() ,
  group_id bigint references community_group(id) on delete set null,
  author_id bigint not null references profiles(id) on delete cascade,
  title text,
  body text,
  slug text not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz,
  search_vector tsvector,
  unique (group_id, slug)
);

create table if not exists community_post_files (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  post_id UUID REFERENCES community_post(public_id) ON DELETE CASCADE,
  url TEXT NOT NULL,
  file_name TEXT NOT NULL,
  mime_type TEXT NOT NULL
);

create table if not exists community_comment (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4() unique,
  post_id bigint not null references community_post(id) on delete cascade,
  author_id bigint not null references profiles(id) on delete cascade,
  parent_id bigint references community_comment(id) on delete cascade,
  body text not null,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_comment_files (
  id UUID primary key default uuid_generate_v4(),
  comment_id UUID references community_comment(public_id) on delete cascade,
  url TEXT NOT NULL,
  file_name TEXT NOT NULL,
  mime_type TEXT NOT NULL
);

create table if not exists community_reaction (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  target_type text not null check (target_type in ('post', 'comment')),
  target_id bigint not null,
  user_id bigint not null references profiles(id) on delete cascade,
  emoji text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (target_type, target_id, user_id, emoji)
);

create table if not exists community_points_ledger (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  points int not null,
  reason text,
  ref jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_achievement (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  code text unique not null,
  name text not null,
  description text,
  rule jsonb,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists community_user_achievement (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  achievement_id bigint not null references community_achievement(id) on delete cascade,
  current_value int not null default 0,
  unlocked boolean not null default false,
  unlocked_at timestamptz not null default now(),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz

  constraint unique_user_achievement unique (user_id, achievement_id)
);

create table if not exists community_checkin (
  id bigserial primary key,
  user_id bigint not null references profiles(id) on delete cascade,
  checkin_date date not null default current_date,
  created_at timestamptz not null default now(),
  unique (user_id, checkin_date) -- 防止同一天重复签到
);

create table if not exists community_quiz (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  slug text unique not null, -- 比如 "calculus-basics"
  author_id uuid not null references auth.users(id),
  title text not null,
  description text,
  tags text[],
  difficulty int check (difficulty between 1 and 5),
  max_attempts int not null default 1,
  visibility text check (visibility in ('public','private')) default 'public',
  quiz_mode text check (quiz_mode in ('practice', 'strict')) default 'practice',
  time_limit_minutes int,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now()
);

create table if not exists community_quiz_question (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  quiz_id bigint not null references community_quiz(id),
  slug text not null, -- 比如 "q1" 或 "derivative-definition"
  question_type text not null default 'single_choice' check (question_type in ('single_choice', 'multiple_choice', 'fill_in_blank'));
  question_text text not null,
  options text[],
  correct_answers text[],
  explanation text,
  unique(quiz_id, slug) -- 确保在 quiz 内唯一
);

create table if not exists community_quiz_attempt (
  id bigserial primary key,
  quiz_id bigint not null references community_quiz(id),
  user_id uuid not null references auth.users(id),
  status text not null default 'not_started' check (status in ('not_started', 'in_progress', 'submitted', 'graded')),
  score int not null default 0,
  created_at timestamptz not null default now()
);

create table if not exists community_quiz_attempt_answer (
  id bigserial primary key,
  attempt_id bigint not null references community_quiz_attempt(id) on delete cascade,
  question_id bigint not null references community_quiz_question(id),
  user_answer text[],   -- 存储用户选的选项索引，或填空的文本
  is_correct boolean
);

-- 2. Create community_quiz_attempt_session table
CREATE TABLE IF NOT EXISTS community_quiz_attempt_session (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  attempt_id bigint not null references community_quiz_attempt(id) on delete cascade,
  quiz_id bigint not null references community_quiz(id),
  user_id uuid not null references auth.users(id),
  session_token varchar(255) not null unique,
  status varchar(20) not null default 'active' check (status in ('active', 'expired', 'completed')),
  
  -- Time tracking
  time_limit_minutes integer,
  time_spent_seconds integer not null default 0,
  started_at timestamptz not null default now(),
  last_activity_at timestamptz not null default now(),
  expires_at timestamptz,
  
  -- Progress tracking
  current_question_index integer not null default 0,
  total_questions integer not null,
  
  -- Metadata
  browser_info jsonb,
  ip_address inet,
  
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  
  -- Constraints
  unique(attempt_id)
);

create table if not exists community_quiz_permission (
  id bigserial primary key,
  quiz_id bigint not null references community_quiz(id),
  user_id uuid not null references auth.users(id),
  permission_type text not null check (permission_type in ('view', 'attempt', 'edit')),
  granted_by uuid not null references auth.users(id),
  expires_at timestamptz,
  created_at timestamptz not null default now(),
  unique(quiz_id, user_id, permission_type)
);

create table if not exists community_quiz_invite_token (
  id bigserial primary key,
  token text unique not null,
  quiz_id bigint not null references community_quiz(id),
  permission_type text not null check (permission_type in ('view', 'attempt', 'edit')),
  created_by uuid not null references auth.users(id),
  expires_at timestamptz,
  max_uses int default null, -- null = unlimited
  current_uses int default 0,
  is_active boolean default true,
  created_at timestamptz not null default now()
);

create table if not exists community_quiz_like (
  id bigserial primary key,
  quiz_id bigint not null references community_quiz(id),
  user_id uuid not null references auth.users(id),
  created_at timestamptz not null default now(),
  unique(quiz_id, user_id)
);

-- =========================
-- Tutoring (from db/tutoring/schema.sql)
-- =========================
create table if not exists tutoring_tutors (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  headline text,
  subjects text[] not null default '{}',
  hourly_rate numeric(10,2),
  qualifications text,
  rating_avg numeric(3,2) default 0,
  rating_count int default 0,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_students (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  user_id bigint not null references profiles(id) on delete cascade,
  school text,
  grade text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_availability (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  tutor_id bigint not null references tutoring_tutors(id) on delete cascade,
  start_at timestamptz not null,
  end_at timestamptz not null,
  rrule text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_appointments (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  tutor_id bigint not null references tutoring_tutors(id) on delete restrict,
  student_id bigint not null references tutoring_students(id) on delete restrict,
  scheduled_at timestamptz not null,
  duration_min int not null check (duration_min > 0),
  status text not null check (status in ('requested','confirmed','completed','cancelled')) default 'requested',
  notes text,
  created_by bigint references profiles(id),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_file (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete cascade,
  path text not null,
  mime_type text,
  size_bytes bigint,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_note (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  owner_id bigint not null references profiles(id) on delete cascade,
  title text,
  body text,
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists tutoring_share (
  id bigserial primary key,
  public_id uuid not null default uuid_generate_v4(),
  resource_kind text not null check (resource_kind in ('file','note')),
  resource_id bigint not null,
  shared_with bigint references profiles(id),
  access text not null check (access in ('view','edit','comment')),
  is_deleted boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);

create table if not exists hashtags (
  id bigserial primary key,
  name text unique not null check (name <> ''),
  search_vector tsvector
);

create table if not exists post_hashtags (
  post_id uuid references community_post(public_id) on delete cascade,
  hashtag_id bigint references hashtags(id) on delete cascade,
  primary key (post_id, hashtag_id)
);

-- Search Vectors indexes (post and hashtags)
create index if not exists idx_community_post_search
  on community_post using gin(search_vector);

create index if not exists idx_hashtags_search
  on hashtags using gin(search_vector);

-- =========================
-- Embedding System Tables
-- =========================

-- Main embedding table for storing vector embeddings
CREATE TABLE IF NOT EXISTS embeddings (
  id bigserial PRIMARY KEY,
  public_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  
  -- Content identification
  content_type text NOT NULL CHECK (content_type IN ('profile', 'post', 'comment', 'course', 'lesson', 'auth_user')),
  content_id bigint NOT NULL, -- References the actual content table ID
  content_hash text NOT NULL, -- Hash of content to detect changes
  
  -- Embedding data
  embedding vector(384), -- 384-dimensional embedding vector
  content_text text NOT NULL, -- The actual text that was embedded
  
  -- Enhanced metadata
  chunk_type text CHECK (chunk_type IN ('summary', 'section', 'paragraph', 'detail')),
  hierarchy_level int DEFAULT 0,
  parent_chunk_id bigint REFERENCES embeddings(id),
  section_title text,
  semantic_density float CHECK (semantic_density >= 0 AND semantic_density <= 1),
  key_terms text[],
  sentence_count int DEFAULT 0,
  word_count int DEFAULT 0,
  has_code_block boolean DEFAULT false,
  has_table boolean DEFAULT false,
  has_list boolean DEFAULT false,
  chunk_language text DEFAULT 'en',
  
  -- Metadata
  embedding_model text DEFAULT 'intfloat/e5-small',
  language text DEFAULT 'en',
  token_count int,
  
  -- Status and lifecycle
  status text NOT NULL CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'outdated')) DEFAULT 'pending',
  error_message text,
  retry_count int DEFAULT 0,
  
  -- Timestamps
  is_deleted boolean NOT NULL DEFAULT false,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  deleted_at timestamptz,
  
  -- Ensure uniqueness per content
  UNIQUE(content_type, content_id)
);

-- Embedding queue for batch processing
CREATE TABLE IF NOT EXISTS embedding_queue (
  id bigserial PRIMARY KEY,
  public_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  
  -- Content identification
  content_type text NOT NULL CHECK (content_type IN ('profile', 'post', 'comment', 'course', 'lesson', 'auth_user')),
  content_id bigint NOT NULL,
  content_text text NOT NULL,
  content_hash text NOT NULL,
  
  -- Processing metadata
  priority int DEFAULT 5 CHECK (priority BETWEEN 1 AND 10), -- 1 = highest priority
  scheduled_at timestamptz DEFAULT now(),
  processing_started_at timestamptz,
  retry_count int DEFAULT 0,
  max_retries int DEFAULT 3,
  
  -- Status
  status text NOT NULL CHECK (status IN ('queued', 'processing', 'completed', 'failed')) DEFAULT 'queued',
  error_message text,
  
  -- Timestamps
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  
  -- Ensure no duplicates in queue
  UNIQUE(content_type, content_id)
);

-- Embedding search history for analytics
CREATE TABLE IF NOT EXISTS embedding_searches (
  id bigserial PRIMARY KEY,
  public_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  
  -- Search details
  user_id bigint REFERENCES profiles(id) ON DELETE SET NULL,
  query_text text NOT NULL,
  query_embedding vector(384),
  
  -- Search parameters
  content_types text[] DEFAULT '{}', -- Filter by content types
  similarity_threshold numeric(3,2) DEFAULT 0.7,
  max_results int DEFAULT 10,
  
  -- Results
  results_count int DEFAULT 0,
  results_data jsonb DEFAULT '[]'::jsonb, -- Store top results for analytics
  
  -- Performance metrics
  processing_time_ms int,
  embedding_time_ms int,
  search_time_ms int,
  
  -- Timestamps
  created_at timestamptz NOT NULL DEFAULT now()
);

-- Document hierarchy table for storing document structure
CREATE TABLE IF NOT EXISTS document_hierarchy (
  id bigserial PRIMARY KEY,
  public_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  
  -- Content identification
  content_type text NOT NULL,
  content_id bigint NOT NULL,
  
  -- Document structure
  document_title text,
  document_structure jsonb, -- Stores the hierarchical structure
  summary_embedding_id bigint REFERENCES embeddings(id),
  
  -- Statistics
  total_chunks int DEFAULT 0,
  estimated_reading_time int DEFAULT 0, -- in minutes
  has_table_of_contents boolean DEFAULT false,
  
  -- Timestamps
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  
  -- Ensure uniqueness per content
  UNIQUE(content_type, content_id)
);

CREATE TABLE IF NOT EXISTS announcements (
    id bigserial primary key,
    public_id uuid not null default uuid_generate_v4(),
    created_by bigint not null references profiles(id) on delete cascade,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    image_url TEXT,               -- optional (for rich notifications)
    deep_link TEXT,               -- optional (redirect URL in app)
    status VARCHAR(20) DEFAULT 'draft',  -- draft | scheduled | sent | failed
    scheduled_at TIMESTAMPTZ,     -- optional, for scheduling
    sent_at TIMESTAMPTZ,
    onesignal_id TEXT,            -- store OneSignal notification_id
    onesignal_response JSONB,     -- store full API response
    is_deleted boolean default false,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS video_embeddings (
  id bigserial PRIMARY KEY,
  public_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  attachment_id bigint NOT NULL references course_attachments(id) on delete cascade,
  content_type text NOT NULL CHECK (content_type IN ('profile', 'post', 'comment', 'course', 'lesson', 'auth_user')),  
  embedding vector(384), -- 384-dimensional embedding vector
  content_text text NOT NULL, -- The actual text that was embedded
  chunk_type text CHECK (chunk_type IN ('summary', 'section', 'paragraph', 'detail')),
  hierarchy_level int DEFAULT 0,
  parent_chunk_id bigint REFERENCES embeddings(id),
  section_title text,
  semantic_density float CHECK (semantic_density >= 0 AND semantic_density <= 1),
  key_terms text[],
  sentence_count int DEFAULT 0,
  word_count int DEFAULT 0,
  has_code_block boolean DEFAULT false,
  has_table boolean DEFAULT false,
  has_list boolean DEFAULT false,
  chunk_language text DEFAULT 'en',
  embedding_model text DEFAULT 'intfloat/e5-small',
  language text DEFAULT 'en',
  token_count int,
  status text NOT NULL CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'outdated')) DEFAULT 'pending',
  error_message text,
  retry_count int DEFAULT 0,
  is_deleted boolean NOT NULL DEFAULT false,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  deleted_at timestamptz
);


-- =========================
-- Quiz System Indexes
-- =========================

-- Quiz attempt status indexes
CREATE INDEX IF NOT EXISTS idx_community_quiz_attempt_status 
ON community_quiz_attempt(quiz_id, user_id, status);

CREATE INDEX IF NOT EXISTS idx_community_quiz_attempt_user_quiz 
ON community_quiz_attempt(user_id, quiz_id, created_at DESC);

-- Quiz session indexes
CREATE UNIQUE INDEX IF NOT EXISTS uq_quiz_session_user_active
ON community_quiz_session(user_id, quiz_id)
WHERE status = 'active';

CREATE INDEX IF NOT EXISTS idx_quiz_session_user_quiz 
ON community_quiz_session(user_id, quiz_id);

CREATE INDEX IF NOT EXISTS idx_quiz_session_status 
ON community_quiz_session(status);

CREATE INDEX IF NOT EXISTS idx_quiz_session_expires 
ON community_quiz_session(expires_at) WHERE expires_at IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_quiz_session_token 
ON community_quiz_session(session_token);

CREATE INDEX IF NOT EXISTS idx_quiz_session_activity 
ON community_quiz_session(last_activity_at);

-- =========================
-- Quiz System Functions
-- =========================

-- Function to automatically expire old sessions
CREATE OR REPLACE FUNCTION expire_old_quiz_sessions()
RETURNS void AS $$
BEGIN
  UPDATE community_quiz_session 
  SET status = 'expired', updated_at = now()
  WHERE status = 'active' 
    AND expires_at IS NOT NULL 
    AND expires_at < now();
END;
$$ LANGUAGE plpgsql;

-- Function to clean up abandoned sessions
CREATE OR REPLACE FUNCTION cleanup_abandoned_quiz_sessions()
RETURNS void AS $$
BEGIN
  -- Mark sessions as expired if no activity for more than 2 hours
  UPDATE community_quiz_session 
  SET status = 'expired', updated_at = now()
  WHERE status = 'active' 
    AND last_activity_at < now() - interval '2 hours';
    
  -- Optionally delete very old expired sessions (older than 30 days)
  DELETE FROM community_quiz_session 
  WHERE status IN ('expired', 'completed') 
    AND updated_at < now() - interval '30 days';
END;
$$ LANGUAGE plpgsql;

-- Function to update updated_at timestamp for quiz sessions
CREATE OR REPLACE FUNCTION update_quiz_session_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =========================
-- Quiz System Triggers
-- =========================

-- Trigger to update updated_at timestamp on quiz session updates
CREATE TRIGGER trigger_update_quiz_session_updated_at
  BEFORE UPDATE ON community_quiz_session
  FOR EACH ROW
  EXECUTE FUNCTION update_quiz_session_updated_at();

-- =========================
-- Quiz System Comments
-- =========================

-- Table comments
COMMENT ON TABLE community_quiz_session IS 'Manages active quiz sessions with time tracking and progress persistence';

-- Column comments for community_quiz_attempt
COMMENT ON COLUMN community_quiz_attempt.status IS 'Attempt status: in_progress (ongoing), completed (finished), abandoned (left incomplete)';

-- Column comments for community_quiz
COMMENT ON COLUMN community_quiz.time_limit_minutes IS 'Quiz total time limit in minutes, null means unlimited';

-- Column comments for community_quiz_session
COMMENT ON COLUMN community_quiz_session.session_token IS 'Unique token for session validation and security';
COMMENT ON COLUMN community_quiz_session.status IS 'Session status: active (ongoing), paused (temporarily stopped), expired (timed out), completed (finished)';
COMMENT ON COLUMN community_quiz_session.time_limit_minutes IS 'Total time limit for this session in minutes, copied from quiz settings';
COMMENT ON COLUMN community_quiz_session.time_spent_seconds IS 'Total time spent in this session in seconds';
COMMENT ON COLUMN community_quiz_session.current_question_index IS 'Current question index (0-based) for progress tracking';
COMMENT ON COLUMN community_quiz_session.browser_info IS 'Browser and client information for session validation';